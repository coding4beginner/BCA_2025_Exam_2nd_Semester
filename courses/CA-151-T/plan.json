{
    "title": "Advanced C Programming Study Plan",
    "chapters": [
      {
        "chapterNumber": 1,
        "chapterTitle": "Preprocessor",
        "sections": [
          {
            "heading": "1.1 Overview of the C Preprocessor",
            "content": "The C preprocessor is a text substitution tool that modifies source code before the compiler sees it. It handles directives such as #include, #define, etc."
          },
          {
            "heading": "1.2 Format of Preprocessor Directives",
            "content": "File inclusion (#include), macro substitution (#define), parameterized macros, nested macros, #error/#pragma, conditional compilation (#if, #ifdef, #else, #elif, #endif), and predefined macros (__DATE__, __TIME__, __FILE__, __LINE__, __STDC__)."
          },
          {
            "heading": "1.3 Conditional Compilation and Predefined Macros",
            "content": "Use conditional compilation to control which sections of code are compiled. Predefined macros provide the current file name, line number, date/time, etc."
          }
        ],
        "codeExamples": [
          {
            "title": "Example 1: Basic Macro and Conditional Compilation",
            "code": "#include <stdio.h>\n\n// Macro for PI\n#define PI 3.14159\n\n// Parameterized Macro for area of a circle\n#define AREA_CIRCLE(r) (PI * (r) * (r))\n\n#ifdef DEBUG\n  #define LOG(msg) printf(\"DEBUG: %s\\n\", msg)\n#else\n  #define LOG(msg)\n#endif\n\nint main() {\n    double radius = 2.5;\n    double area = AREA_CIRCLE(radius);\n\n    LOG(\"Calculating circle area\");\n    printf(\"Area = %f\\n\", area);\n\n    return 0;\n}\n"
          },
          {
            "title": "Example 2: Predefined Macros",
            "code": "#include <stdio.h>\n\nint main() {\n    printf(\"File: %s\\n\", __FILE__);\n    printf(\"Date: %s\\n\", __DATE__);\n    printf(\"Time: %s\\n\", __TIME__);\n    printf(\"Line: %d\\n\", __LINE__);\n    printf(\"STDC: %d\\n\", __STDC__);\n    return 0;\n}\n"
          }
        ],
        "exercises": [
          "Define a macro MAX(a,b) that returns the maximum of two numbers.",
          "Write a macro IS_UPPER(c) to check if a character is uppercase.",
          "Create a program using #if or #ifdef to compile different code paths for simulated Windows vs. Linux environments."
        ],
        "endOfChapterQuestion": "What is the difference between an object-like macro and a function-like macro in C, and in which scenarios would you choose one over the other?"
      },
      {
        "chapterNumber": 2,
        "chapterTitle": "Pointers",
        "sections": [
          {
            "heading": "2.1 Concept of Pointers",
            "content": "Pointers store the address of variables. Dereference operator * and address-of operator & are used to access or provide addresses."
          },
          {
            "heading": "2.2 Pointer Arithmetic",
            "content": "Pointers can be incremented/decremented to traverse array elements. Multiple indirection refers to pointers to pointers."
          },
          {
            "heading": "2.3 Parameter Passing",
            "content": "Call by value vs. call by reference. Using pointers lets functions modify the original variable."
          },
          {
            "heading": "2.4 Pointers and Arrays",
            "content": "An array can decay to a pointer. We can have a pointer to an array or an array of pointers."
          },
          {
            "heading": "2.5 Functions & Pointers",
            "content": "Pointers can be passed to or returned from functions. Function pointers can store addresses of functions for callback usage."
          },
          {
            "heading": "2.6 Dynamic Memory Management",
            "content": "malloc(), calloc(), realloc(), and free(). Watch for memory leaks and dangling pointers."
          }
        ],
        "codeExamples": [
          {
            "title": "Example 3: Swapping Two Variables (Call by Reference)",
            "code": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x=%d, y=%d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap : x=%d, y=%d\\n\", x, y);\n    return 0;\n}\n"
          },
          {
            "title": "Example 4: Dynamic Array Creation and Usage",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    int *arr = (int*)malloc(n * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    for(int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n\n    printf(\"Array elements: \");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n    arr = NULL;\n    return 0;\n}\n"
          }
        ],
        "exercises": [
          "Write a program to read an integer array using malloc and print it in reverse using pointer notation.",
          "Implement a function pointer in a menu-driven calculator (add, subtract, multiply, divide).",
          "Demonstrate pointer to pointer to swap two strings."
        ],
        "endOfChapterQuestion": "In what scenarios would you choose to use a pointer to a pointer, and what additional considerations must you handle with such usage?"
      },
      {
        "chapterNumber": 3,
        "chapterTitle": "Strings",
        "sections": [
          {
            "heading": "3.1 Introduction to Strings in C",
            "content": "Strings are arrays of characters terminated by a null character '\\0'. We can store them in arrays or via pointers."
          },
          {
            "heading": "3.2 Reading and Writing Strings",
            "content": "Use scanf, gets, fgets for input; printf, puts for output. Watch for buffer overflows and newlines."
          },
          {
            "heading": "3.3 Strings and Pointers",
            "content": "We can pass strings to functions by passing a pointer to the first character. Array of strings vs. array of character pointers."
          },
          {
            "heading": "3.4 String Functions in <string.h>",
            "content": "Includes strlen, strcpy, strcat, strcmp, strrev, strupr, strstr, strtok, and more."
          },
          {
            "heading": "3.5 Command-Line Arguments",
            "content": "main(int argc, char* argv[]) usage. We can parse arguments from the command line for simple text processing."
          }
        ],
        "codeExamples": [
          {
            "title": "Example 5: Basic String Manipulations",
            "code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char name[50];\n    printf(\"Enter your name: \");\n    fgets(name, 50, stdin);\n    name[strcspn(name, \"\\n\")] = '\\0';\n\n    printf(\"Length of name: %lu\\n\", strlen(name));\n    strupr(name);\n    printf(\"Name in uppercase: %s\\n\", name);\n    return 0;\n}\n"
          },
          {
            "title": "Example 6: Command-line Argument Usage",
            "code": "#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        printf(\"Usage: %s <word>\\n\", argv[0]);\n        return 1;\n    }\n\n    char temp[100];\n    strcpy(temp, argv[1]);\n    strrev(temp);\n\n    printf(\"Original: %s\\n\", argv[1]);\n    printf(\"Reversed: %s\\n\", temp);\n\n    return 0;\n}\n"
          }
        ],
        "exercises": [
          "Write a program to split a sentence into words using strtok.",
          "Implement a program to compare two strings ignoring case and check if they're an anagram.",
          "Create a command-line program that counts vowels, consonants, and digits from the command line."
        ],
        "endOfChapterQuestion": "Explain the differences between using a character array and a character pointer for storing strings. How does memory allocation differ?"
      },
      {
        "chapterNumber": 4,
        "chapterTitle": "Structures",
        "sections": [
          {
            "heading": "4.1 Introduction to Structures",
            "content": "Structures group different data types under a single name. Access members with the dot operator."
          },
          {
            "heading": "4.2 Array of Structures",
            "content": "We can store multiple structure variables in an array, e.g. an array of student records."
          },
          {
            "heading": "4.3 Pointers to Structures",
            "content": "A pointer to a structure allows dynamic management of structure data. Use -> or (*ptr).member to access fields."
          },
          {
            "heading": "4.4 Structures and Functions",
            "content": "Structures can be passed by value or by address. Large structures are typically passed by address for efficiency."
          },
          {
            "heading": "4.5 Nested Structures, typedef, and Union",
            "content": "Structures can be nested within others. typedef helps with readability. Union shares memory for different member types."
          }
        ],
        "codeExamples": [
          {
            "title": "Example 7: Array of Structures",
            "code": "#include <stdio.h>\n#include <string.h>\n\nstruct Student {\n    int rollNo;\n    char name[50];\n    float marks;\n};\n\nint main() {\n    struct Student sArr[3];\n\n    for(int i = 0; i < 3; i++) {\n        printf(\"Enter rollNo, name, and marks for student %d:\\n\", i+1);\n        scanf(\"%d\", &sArr[i].rollNo);\n        getchar();\n        fgets(sArr[i].name, 50, stdin);\n        sArr[i].name[strcspn(sArr[i].name, \"\\n\")] = '\\0';\n        scanf(\"%f\", &sArr[i].marks);\n    }\n\n    printf(\"\\nStudent Details:\\n\");\n    for(int i = 0; i < 3; i++) {\n        printf(\"Roll: %d, Name: %s, Marks: %.2f\\n\",\n               sArr[i].rollNo, sArr[i].name, sArr[i].marks);\n    }\n    return 0;\n}\n"
          },
          {
            "title": "Example 8: Using typedef and Union",
            "code": "#include <stdio.h>\n\ntypedef struct {\n    char title[30];\n    float price;\n} Book;\n\nunion Data {\n    int i;\n    float f;\n    char str[20];\n};\n\nint main() {\n    Book b = {\"C Programming\", 299.0f};\n    printf(\"Book: %s, Price: %.2f\\n\", b.title, b.price);\n\n    union Data data;\n    data.i = 10;\n    printf(\"Union Data (int): %d\\n\", data.i);\n    data.f = 10.5;\n    printf(\"Union Data (float): %.2f\\n\", data.f);\n    // Overwrites memory used by 'i'\n\n    return 0;\n}\n"
          }
        ],
        "exercises": [
          "Write a program to sort an array of structures (e.g. employees) by salary.",
          "Create a nested structure (e.g. employee with a struct date) and display the data.",
          "Demonstrate memory sharing in a union by storing different data types in the same union variable."
        ],
        "endOfChapterQuestion": "When passing a structure to a function, what are the trade-offs between passing it by value vs. by address?"
      },
      {
        "chapterNumber": 5,
        "chapterTitle": "File Handling",
        "sections": [
          {
            "heading": "5.1 Introduction to File Handling",
            "content": "A file is a collection of data stored on disk. Streams are used to connect file data to the program."
          },
          {
            "heading": "5.2 Types of Files",
            "content": "Text files store data as readable ASCII; binary files store data in raw form. They differ in how data is interpreted."
          },
          {
            "heading": "5.3 File Operations",
            "content": "fopen, fclose, fgetc, fputc, fgets, fputs, fread, fwrite, fprintf, fscanf, and random access with fseek, ftell, rewind."
          }
        ],
        "codeExamples": [
          {
            "title": "Example 9: Writing and Reading Text Files",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *fp;\n    fp = fopen(\"data.txt\", \"w\");\n    if(!fp) {\n        printf(\"Cannot open file.\\n\");\n        return 1;\n    }\n\n    fprintf(fp, \"Hello, world!\\n\");\n    fclose(fp);\n\n    fp = fopen(\"data.txt\", \"r\");\n    if(!fp) {\n        printf(\"Cannot open file.\\n\");\n        return 1;\n    }\n\n    char line[100];\n    while(fgets(line, 100, fp) != NULL) {\n        printf(\"%s\", line);\n    }\n\n    fclose(fp);\n    return 0;\n}\n"
          },
          {
            "title": "Example 10: Reading & Writing a Binary File",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Record {\n    int id;\n    float value;\n};\n\nint main() {\n    struct Record rec1 = {1001, 55.75f}, rec2;\n    FILE *fp = fopen(\"data.bin\", \"wb\");\n    if(!fp) {\n        printf(\"Cannot open file.\\n\");\n        return 1;\n    }\n\n    fwrite(&rec1, sizeof(struct Record), 1, fp);\n    fclose(fp);\n\n    fp = fopen(\"data.bin\", \"rb\");\n    if(!fp) {\n        printf(\"Cannot open file.\\n\");\n        return 1;\n    }\n\n    fread(&rec2, sizeof(struct Record), 1, fp);\n    fclose(fp);\n\n    printf(\"Read from file: ID=%d, Value=%.2f\\n\", rec2.id, rec2.value);\n    return 0;\n}\n"
          }
        ],
        "exercises": [
          "Write a program to append text to an existing file, then display its new contents.",
          "Implement a menu-driven program that stores student records in a binary file (add, search, display).",
          "Use fseek to read a record from a random position in a binary file."
        ],
        "endOfChapterQuestion": "Explain how random access (fseek, ftell) can be used to update a record in a large binary file without reading it entirely into memory."
      }
    ],
    "practiceAndReview": {
      "title": "Practice, Review, and Further Reading",
      "additionalExercises": [
        "File Encryption: Read data from a text file, shift all characters, and write out encrypted data.",
        "Sorting a Large Data File: Store numeric data in a binary file; implement external sort using partial reads and writes.",
        "Advanced Macros: Create debug macros that log the current line, file, and function name in an error log."
      ],
      "recommendedReading": [
        "The C Programming Language (2nd Edition) – B.W. Kernighan & D.M. Ritchie",
        "Programming in C – A Practical Approach – Ajay Mittal (Pearson)",
        "Programming with C – Byron S Gottfried (Schaum’s Outlines)",
        "A Structured Programming Approach using C – Behrouz Forouzan & Richard Gilberg",
        "Let Us C – Yashwant Kanetkar (BPB Publications)"
      ]
    }
  }
  